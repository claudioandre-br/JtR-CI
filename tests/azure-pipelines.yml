######################################################################
# Copyright (c) 2019 Claudio Andr√© <claudioandre.br at gmail.com>
#
# This program comes with ABSOLUTELY NO WARRANTY; express or implied.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, as expressed in version 2, seen at
# http://www.gnu.org/licenses/gpl-2.0.html
######################################################################
stages:
- stage: basic
  displayName: Acceptance Test
  jobs:
  - job: Windows_2012
    condition: false
    displayName: Windows 2012
    pool:
      vmImage: 'vs2015-win2012r2'
    variables:
      - template: .azure/windows-variables.yml
    steps:
      - template: .azure/windows-ci.yml

  - job: Windows_2016
    condition: false
    displayName: Windows 2016
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      - template: .azure/windows-variables.yml
    steps:
      - template: .azure/windows-ci.yml

  - job: Windows_2019
    condition: false
    displayName: Windows 2019
    pool:
      vmImage: 'windows-2019'
    variables:
      - template: .azure/windows-variables.yml
    steps:
      - template: .azure/windows-ci.yml

  - job: internal
    condition: false
    displayName: Ubuntu 16.04
    pool:
      vmImage: 'ubuntu-16.04'

    variables:
      TARGET_ARCH: "NIX"
      EXTRA: "full;extra;crack;"

    steps:
      - template: .azure/linux-ci.yml

- stage: fuzz
  displayName: 'Fuzzing'
  dependsOn: basic
  jobs:
  - job: zzuf
    condition: false
    container:
      image: claudioandre/john:ubuntu.opencl_J558.3

    variables:
      TARGET_ARCH: "NIX"
      EXTRA: "ZZUF_FUZZ"
      BUILD_OPTS: "--enable-fuzz"

    steps:
      - template: .azure/linux-ci.yml

  - job: afl
    condition: false
    container:
      image: claudioandre/john:ubuntu.opencl

    variables:
      TARGET_ARCH: "NIX"
      EXTRA: "AFL_FUZZ"
      BUILD_OPTS: "--enable-fuzz --disable-native-tests"
      CC: "afl-clang-fast"

    steps:
      - template: .azure/linux-ci.yml

  # Runs "--fuzz"
  - job: internal
    condition: false
    container:
      image: claudioandre/john:ubuntu.opencl

    variables:
      TARGET_ARCH: "NIX"
      EXTRA: "MY_INTERNAL"
      BUILD_OPTS: "--enable-fuzz"

    steps:
      - template: .azure/linux-ci.yml

  # Runs "--test-full=1"
  - job: full
    condition: false
    container:
      image: claudioandre/john:ubuntu.opencl

    variables:
      TARGET_ARCH: "NIX"
      EXTRA: "MY_FULL"
      BUILD_OPTS: "--enable-fuzz"

    steps:
      - template: .azure/linux-ci.yml

- stage: delivery
  displayName: Delivery
  dependsOn: basic
  jobs:
  - job: Windows_2012
    displayName: Windows 2012
    pool:
      vmImage: 'vs2015-win2012r2'
    variables:
      - template: .azure/windows-variables.yml
    steps:
      - template: .azure/checkout.yml
      - template: .azure/windows-system-info.yml
      - template: .azure/windows-build-to-delivery.yml
      - template: .azure/windows-push-artifacts.yml
      - template: .azure/windows-pull-artifacts.yml

      - template: .azure/windows-testing.yml
        parameters:
          fullTest: 'no'
          johnBinary: 'john'
          johnDirectory: $(System.ArtifactsDirectory)\JtR\run

- stage: deploy
  displayName: Check Deploy
  dependsOn: delivery
  jobs:
  - job: Windows_2012
    displayName: Windows 2012
    pool:
      vmImage: 'vs2015-win2012r2'
    variables:
      - template: .azure/windows-variables.yml
    steps:
      - checkout: none
      - template: .azure/windows-pull-artifacts.yml

      - template: .azure/windows-testing.yml
        parameters:
          fullTest: 'yes'
          johnBinary: 'john'
          johnDirectory: $(System.ArtifactsDirectory)\JtR\run

  - job: Windows_2016
    displayName: Windows 2016
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      - template: .azure/windows-variables.yml
    steps:
      - checkout: none
      - template: .azure/windows-pull-artifacts.yml

      - template: .azure/windows-testing.yml
        parameters:
          fullTest: 'yes'
          johnBinary: 'john'
          johnDirectory: $(System.ArtifactsDirectory)\JtR\run

  - job: Windows_2019
    displayName: Windows 2019
    pool:
      vmImage: 'windows-2019'
    variables:
      - template: .azure/windows-variables.yml
    steps:
      - checkout: none
      - template: .azure/windows-pull-artifacts.yml

      - template: .azure/windows-testing.yml
        parameters:
          fullTest: 'yes'
          johnBinary: 'john'
          johnDirectory: $(System.ArtifactsDirectory)\JtR\run
